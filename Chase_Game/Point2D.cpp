#include <cstdlib> // ¬ключаем заголовочный файл дл€ использовани€ функции srand() и std::rand()
#include <time.h> // ¬ключаем заголовочный файл дл€ использовани€ функции time()

#include "Point2D.h" // ¬ключаем заголовочный файл Point2D.h дл€ доступа к определению класса Point2D

void Point2D::initialize() { // ќпределение метода initialize() класса Point2D дл€ инициализации координат случайными значени€ми
    srand(time(NULL)); // »нициализаци€ генератора случайных чисел текущим временем
    x = std::rand() % 30; // »нициализаци€ координаты x случайным значением от 0 до 29
    y = std::rand() % 30; // »нициализаци€ координаты y случайным значением от 0 до 29
}

void Point2D::initialize(Point2D pos) { // ѕерегруженный метод initialize() класса Point2D дл€ инициализации координат с учетом переданной точки pos
    srand(time(NULL)); // »нициализаци€ генератора случайных чисел текущим временем
    while (true) { // «апуск бесконечного цикла дл€ генерации точек до тех пор, пока не будет найдена точка, удовлетвор€юща€ условию
        x = std::rand() % 30; // √енераци€ случайного значени€ координаты x от 0 до 29
        y = std::rand() % 30; // √енераци€ случайного значени€ координаты y от 0 до 29
        // ѕроверка рассто€ни€ между текущей точкой и переданной точкой pos, чтобы оно было больше 5
        if ((abs(pos.x - x) ^ 2 + abs(pos.y - y) ^ 2) ^ 1 / 2 > 5) break; // ≈сли условие выполн€етс€, выходим из цикла
    }
}

int Point2D::getX() const { // ћетод класса Point2D дл€ получени€ значени€ координаты x
    return x; // ¬озвращаем значение координаты x
}

void Point2D::setX(int x) { // ћетод класса Point2D дл€ установки нового значени€ координаты x
    Point2D::x = x; // ѕрисваиваем новое значение координате x
}

int Point2D::getY() const { // ћетод класса Point2D дл€ получени€ значени€ координаты y
    return y; // ¬озвращаем значение координаты y
}

void Point2D::setY(int y) { // ћетод класса Point2D дл€ установки нового значени€ координаты y
    Point2D::y = y; // ѕрисваиваем новое значение координате y
}
